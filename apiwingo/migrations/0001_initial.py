# Generated by Django 2.1.2 on 2019-01-18 07:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [

        migrations.RunSQL(
            """

            DROP VIEW IF EXISTS `vwclientecreditos`;
            CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `vwclientecreditos` AS
              select
                `c`.`CIdCliente` AS `CIdCliente`,
                `c`.`CIdRolUsuario` AS `CIdRolUsuario`,
                `c`.`CCeCliente` AS `CCeCliente`,
                `c`.`NFlCreditoCliente` AS `NFlCreditoCliente`,
                concat(`p`.`CNomPersona`,' ',`p`.`CApePersona`) AS `CNomPersona`,
                `u`.`CTxCorreo` AS `CTxCorreo`,
                `u`.`CNuCelular` AS `CNuCelular`,
                `u`.`CNomUsuario` AS `CNomUsuario`
              from
                (((`tblcliente` `c` join `tblrolusuario` `ru` on((`c`.`CIdRolUsuario` = `ru`.`CIdRolUsuario`))) join `tblusuario` `u` on((`ru`.`CIdUsuario` = `u`.`CIdUsuario`))) join `tblpersona` `p` on((`u`.`CIdPersona` = `p`.`CIdPersona`)))
              order by
                concat(`p`.`CNomPersona`,' ',`p`.`CApePersona`);

            """
        ),

        migrations.RunSQL(
            """
    
            DROP VIEW IF EXISTS `vweventoconresultado`;
            CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `vweventoconresultado` AS 
              select 
                distinct `e`.`CIdEvento` AS `CIdEvento`,
                `e`.`CNomEvento` AS `CNomEvento`,
                `e`.`CTxUrlIcono` AS `CTxUrlIcono`,
                `e`.`DFxInicio` AS `DFxInicio` 
              from 
                ((((`tblevento` `e` join `tbleventodetalle` `ed` on((`e`.`CIdEvento` = `ed`.`CIdEvento`))) join `tbleventodetcompetidor` `edc` on((`ed`.`CIdEventoDetalle` = `edc`.`CIdEventoDetalle`))) join `tbleventodetpronostico` `edp` on((`ed`.`CIdEventoDetalle` = `edp`.`CIdEventoDetalle`))) join `tbleventoresulpronostico` `erp` on(((`edp`.`CIdEventoDetPronostico` = `erp`.`CIdEventoDetPronostico`) and (`edc`.`CIdEventoDetCompetidor` = `erp`.`CIdEventoDetCompetidor`)))) 
              where 
                (`e`.`CSNLiquidado` = 'N') 
                AND (e.`CSNLiquidado`='N')
              order by 
                `e`.`DFxInicio`;
            
    
            """
        ),



        migrations.RunSQL(
            """

            DROP VIEW IF EXISTS `vwclienteeventos`;
            CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `vwclienteeventos` AS
              select
                distinct cast(`ced`.`CIdClientEventoDet` as char(36) charset latin1) AS `ID`,
                cast(`ced`.`CIdCliente` as char(36) charset latin1) AS `CIdCliente`,
                `ed`.`CNomDetalle` AS `CNomDetalle`,
                `e`.`CNomEvento` AS `CNomEvento`,
                `e`.`CSNMultiple` AS `CSNMultiple`,
                `ced`.`NFlTotalEvento` AS `NFlTotalEvento`,
                `ced`.`DFxClienteEventoDet` AS `DFxClienteEventoDet`,
                `edc`.`CNomCompetidorA` AS `CNomCompetidorA`,
                `edc`.`CNomCompetidorB` AS `CNomCompetidorB`,
                `edc`.`CTxUrlIconoA` AS `CTxUrlIconoA`,
                `edc`.`CTxUrlIconoB` AS `CTxUrlIconoB`,
                `edp`.`CNomEventoPronostico` AS `CNomEventoPronostico`,
                `edp`.`CCiCompetidor` AS `CCiCompetidor`
              from
                (((((((`tblclienteeventodet` `ced` left join `tblclienteeventodetcomp` `cedc` on((`ced`.`CIdClientEventoDet` = `cedc`.`CIdClientEventoDet`))) left join `tblclienteeventodetcomppronos` `cedcp` on((`cedc`.`CIdClienteEventoDetComp` = `cedcp`.`CIdClienteEventoDetComp`))) left join `tbleventodetalle` `ed` on((`ced`.`CIdEventoDetalle` = `ed`.`CIdEventoDetalle`))) left join `tblevento` `e` on((`ed`.`CIdEvento` = `e`.`CIdEvento`))) left join `tbleventodetcompetidor` `edc` on((`cedc`.`CIdEventoDetCompetidor` = `edc`.`CIdEventoDetCompetidor`))) left join `tbleventodetpronostico` `edp` on((`ed`.`CIdEventoDetalle` = `edp`.`CIdEventoDetalle`))) left join `tbleventodetpronostico` `edcp` on((`cedcp`.`CIdEventoDetPronostico` = `edp`.`CIdEventoDetPronostico`)));

            """
        ),

        migrations.RunSQL(
            """
                CREATE DEFINER = 'root'@'%' PROCEDURE `sps_premiosEvento`(
                        IN `prmCIdEvento` VARCHAR(36)
                    )
                    NOT DETERMINISTIC
                    CONTAINS SQL
                    SQL SECURITY DEFINER
                    COMMENT ''
                execute_proc:
                BEGIN
                 
                 /*ZONA DE DECLARACIONES DE VARIABLES y OBJETOS*/
                 declare total_acumulado float;
                 declare porcentaje_premios float;
                 declare valor_premios float;
                 declare tipoEvento CHAR(1); 
                 
                 DECLARE done INT DEFAULT FALSE; 
                 DECLARE done2 INT DEFAULT FALSE; 
                
                 DECLARE CIdEvento varchar(36);
                 DECLARE CIdEventoDetalle varchar(36);
                 DECLARE CIdClientEventoDet varchar(36);
                 DECLARE CIdCliente varchar(36);
                 DECLARE NNuCanGanadores integer;
                 DECLARE NNuCanPuntos integer;
                 DECLARE NFlPorcPuntos float;
                
                 DECLARE NFlTotalAcumulado float;
                 DECLARE NFlTotalPremios float;
                 DECLARE NFlPorcDistrib float;
                 DECLARE NFlTotalDistrib float;
                 DECLARE NFlValorGanador float;
                 DECLARE NFlTotalEvento float;
                
                
                
                 DECLARE CIdEventoResulPronostico varchar(36);
                 DECLARE CIdEventoDetPronostico varchar(36);
                 DECLARE CNomEventoPronostico varchar(100);
                
                 DECLARE CIdEventoDetCompetidor varchar(36);
                 DECLARE CTxEventoResulComA varchar(50);
                 DECLARE CTxEventoResulComB varchar(50);
                
                 /********* CURSORES *******/
                
                 -- Cursor PRONOSTICOS
                 DECLARE curPronos CURSOR FOR 
                 SELECT erp.`CidEventoResulPronostico`, erp.`CIdEventoDetPronostico`, 
                 erp.`CIdEventoDetCompetidor`, erp.`CTxEventoResulComA`, erp.`CTxEventoResulComB`
                 FROM `tbleventoresulpronostico` as erp
                 INNER JOIN `tbleventodetpronostico` as edp ON `erp`.`CIdEventoDetPronostico`= edp.`CIdEventoDetPronostico`
                 INNER JOIN `tbleventodetalle` as ed ON edp.`CIdEventoDetalle`=ed.`CIdEventoDetalle`
                 INNER JOIN `tblevento` as e ON ed.`CIdEvento`=e.`CIdEvento`
                 WHERE e.`CIdEvento` = @prmCIdEvento;
                
                 -- Cursor PUNTOS
                 DECLARE curPuntos CURSOR FOR 
                 SELECT v.CIdEvento, v.NNuCanPuntos, ep.`NFlPorcPuntos` , Count(v.NNuCanPuntos) as NNuCanGanadores 
                 FROM vwGanadoresPuntos3  v
                 INNER JOIN `tbleventopunto` ep 
                       ON v.`CIdEvento`=ep.`CIdEvento`
                       AND  v.`NNuCanPuntos`=ep.`NCanPuntos`
                 GROUP BY v.`CIdEvento`, v.`NNuCanPuntos`, ep.`NFlPorcPuntos`;
                 
                 DECLARE curPuntosCompleto CURSOR FOR 
                 SELECT v.CIdEvento, v.CIdEventoDetalle, v.CIdCliente, v.NNuCanPuntos  
                 FROM vwGanadoresPuntos4  v;
                
                 -- Cursor PREMIOS
                 DECLARE curPremios CURSOR FOR 
                 SELECT v.CIdEventoDetPronostico, v.CNomEventoPronostico, v.NNuCanGanadores
                 , v.NFlTotalAcumulado, v.NFlTotalPremios, v.NFlPorcDistrib, v.NFlTotalDistrib
                 , v.NFlValorGanador, v.NFlTotalEvento
                 FROM vwGanadoresPremios v ;
                
                
                 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
                 
                 
                 /*ZONA DE INICIALIZACION DE VARIABLES*/ 
                 set total_acumulado :=0;
                 set porcentaje_premios :=0;
                 set valor_premios :=0;
                
                
                 /*Obtengo el acumulado del evento*/
                 SET @total_acumulado := (
                 select SUM(ced.`NFlTotalEvento`) as NFlTotalEvento
                 from `tblclienteeventodet` ced 
                 Left Outer join `tblclienteeventodetcomp` cedc ON ced.`CIdClientEventoDet` = cedc.`CIdClientEventoDet`
                 Left Outer Join `tblclienteeventodetcomppronos` cedcp ON cedc.`CIdClienteEventoDetComp` = cedcp.`CIdClienteEventoDetComp`
                 Left Outer Join `tbleventodetpronostico` edp ON cedcp.`CIdEventoDetPronostico` = edp.`CIdEventoDetPronostico`
                 Inner Join `tbleventodetalle` ed ON ced.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                 Inner Join `tblevento` e ON ed.`CIdEvento` = e.`CIdEvento`
                 Where e.`CIdEvento` = @prmCIdEvento
                 And edp.`CNomEventoPronostico` is not null 
                 );
                
                
                
                 /*Obtengo el porcentaje de premios*/
                 SET @porcentaje_premios := (
                 Select e.`NFlPorcGanadores` 
                 From `tblevento` as e
                 Where e.`CIdEvento` = @prmCIdEvento
                 );
                
                 
                 
                 /*Obtengo el tipo de evento*/
                 SET @tipoEvento := (
                 SELECT e.`CSNMultiple` 
                 FROM `tblevento` as e
                 WHERE e.`CIdEvento` = @prmCIdEvento
                 );
                 
                    
                 
                 /*Calculo el valor de premios*/
                 SET @valor_premios:= (@porcentaje_premios/100) * @total_acumulado;
                 
                 /*select @total_acumulado, @porcentaje_premios, @valor_premios;*/
                 
                 /*************************** Obtener clientes ganadores *********************/
                
                 /*Creo tabla temporal para ganadores*/
                 DROP TABLE IF EXISTS tmpGanadores;
                 CREATE TABLE tmpGanadores 
                 SELECT cedcp.*, ced.`CIdEventoDetalle`, ced.`CIdCliente`
                 FROM `tblclienteeventodetcomppronos` cedcp
                 INNER JOIN `tblclienteeventodetcomp` cedc ON cedcp.`CIdClienteEventoDetComp` = cedc.`CIdClienteEventoDetComp`
                 INNER JOIN `tblclienteeventodet` ced ON `cedc`.`CIdClientEventoDet` = ced.`CIdEventoDetalle`
                 WHERE 1=2;
                 
                
                 /*obtengo los registro de clientes que solo tengan resultados ganadores*/
                 OPEN curPronos;
                 
                 read_loop:LOOP
                 FETCH curPronos INTO 
                 CidEventoResulPronostico, CIdEventoDetPronostico, CIdEventoDetCompetidor, CTxEventoResulComA, CTxEventoResulComB;
                 
                 IF done THEN
                    LEAVE read_loop;
                 END IF;
                
                 INSERT INTO tmpGanadores
                 SELECT cedcp.*, `ced`.`CIdEventoDetalle`, ced.`CIdCliente`
                 FROM `tblclienteeventodetcomppronos` as cedcp
                 INNER JOIN `tblclienteeventodetcomp` as cedc ON cedcp.`CIdClienteEventoDetComp` = `cedc`.`CIdClienteEventoDetComp`
                 INNER JOIN `tblclienteeventodet` as ced ON cedc.`CIdClientEventoDet` = ced.`CIdClientEventoDet`
                 WHERE cedcp.`CIdEventoDetPronostico` = CIdEventoDetPronostico
                 AND cedc.`CIdEventoDetCompetidor` = CIdEventoDetCompetidor;
                 
                 END LOOP;
                
                 CLOSE curPronos;
                 SET done = FALSE;
                 
                
                 /*** PARA VER GANADORES **/
                 -- select * from tmpGanadores;
                 -- LEAVE execute_proc;
                
                 -- Dynamic view definition and creation
                
                 SET @v = concat('
                   CREATE OR REPLACE VIEW vwGanadoresPuntos as 
                   SELECT ed.`CIdEvento`, g.`CIdEventoDetalle`, ced.`CIdCliente`, COUNT(*) as NNuCanPuntos
                   FROM tmpGanadores as g
                   INNER JOIN `tbleventodetalle` ed ON g.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                   INNER JOIN `tblclienteeventodetcomp` cedc ON g.`CIdClienteEventoDetComp` = cedc.`CIdClienteEventoDetComp`
                   INNER JOIN `tblclienteeventodet` ced ON cedc.`CIdClientEventoDet` = ced.`CIdClientEventoDet`
                   GROUP BY ed.`CIdEvento`, g.`CIdEventoDetalle`, ced.`CIdCliente`;
                 ');
                
                
                 SET @v2 = concat('
                   CREATE OR REPLACE VIEW vwGanadoresPuntos2 as 
                   SELECT ed.`CIdEvento`, ed.`CIdEventoDetalle`, ced.`CIdCliente`, 0 as NNuCanPuntos
                   FROM `tblclienteeventodet` ced 
                   INNER JOIN `tbleventodetalle` ed ON ced.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                   WHERE ced.`CIdCliente` NOT IN (Select CIdCliente From vwGanadoresPuntos)
                   ;
                 ');
                
                 SET @v3 = concat('
                   CREATE OR REPLACE VIEW vwGanadoresPuntos3 as 
                   SELECT CIdEvento, CIdEventoDetalle, CIdCliente, NNuCanPuntos FROM vwGanadoresPuntos 
                   UNION ALL
                   SELECT CIdEvento, CIdEventoDetalle, CIdCliente, NNuCanPuntos FROM vwGanadoresPuntos2 
                   ;
                 ');
                
                
                 
                 IF @tipoEvento = 'T' THEN    
                
                    /************************** GOLAZO  *********************/
                
                    PREPARE stm FROM @v;
                    EXECUTE stm;
                    DEALLOCATE PREPARE stm;
                
                    PREPARE stm FROM @v2;
                    EXECUTE stm;
                    DEALLOCATE PREPARE stm;
                
                    PREPARE stm FROM @v3;
                    EXECUTE stm;
                    DEALLOCATE PREPARE stm;
                    
                    -- select * from vwGanadoresPuntos3;
                    -- LEAVE execute_proc;
                    
                
                    /*** Para ver el UNION ***    
                    SELECT v.CIdEvento, v.NNuCanPuntos, ep.`NFlPorcPuntos` , Count(v.NNuCanPuntos) as NNuCanGanadores 
                    FROM vwGanadoresPuntos3  v
                    INNER JOIN `tbleventopunto` ep 
                         ON v.`CIdEvento`=ep.`CIdEvento`
                         AND  v.`NNuCanPuntos`=ep.`NCanPuntos`
                    GROUP BY v.`CIdEvento`, v.`NNuCanPuntos`, ep.`NFlPorcPuntos`;
                    LEAVE execute_proc;
                    */
                    
                
                    DROP TABLE IF EXISTS tmpGanadoresPremios;
                    CREATE TABLE tmpGanadoresPremios
                    SELECT 
                     CONVERT( '0', CHAR(36)) as CIdEventoDetalle,
                     CONVERT( '0', CHAR(36)) as CIdEventoDetPronostico, 
                     CONVERT( '', CHAR(36)) as CNomEventoPronostico, 
                     CONVERT( 0, DECIMAL(8,0)) as NNuCanGanadores,
                     CONVERT( 0, DECIMAL(8,2)) as NFlTotalAcumulado, 
                     CONVERT( 0, DECIMAL(8,2)) as NFlTotalPremios,
                     CONVERT( 0, DECIMAL(8,2)) as NFlPorcDistrib,
                     CONVERT( 0, DECIMAL(8,2)) as NFlTotalDistrib,
                     CONVERT( 0, DECIMAL(8,2)) as NFlValorGanador,         
                     CONVERT( 0, DECIMAL(8,2)) as  NFlTotalEvento
                    ;
                    DELETE FROM tmpGanadoresPremios;
                
                    -- Open cursor PUNTOS
                    OPEN curPuntos;
                    read_puntos: LOOP
                      FETCH curPuntos 
                      INTO CIdEvento, NNuCanPuntos, NFlPorcPuntos , NNuCanGanadores;
                
                      IF done THEN
                        LEAVE read_puntos;
                      END IF;
                
                      INSERT INTO tmpGanadoresPremios
                      SELECT
                         g.`CIdEventoDetalle`, 
                         CONVERT( NNuCanPuntos, CHAR(36) ), 
                         CONVERT( NFlPorcPuntos, CHAR(36) ), 
                         NNuCanGanadores,
                         CONVERT( @total_acumulado, DECIMAL(8,2)), 
                         CONVERT( @valor_premios, DECIMAL(8,2)),
                         CONVERT( NFlPorcPuntos, DECIMAL(8,2)),
                         CONVERT( (@valor_premios * (NFlPorcPuntos/100)), DECIMAL(8,2)) ,
                         CONVERT( ((@valor_premios * (NFlPorcPuntos/100)) / NNuCanGanadores), DECIMAL(8,2)),         
                         CONVERT( 0, DECIMAL(8,2)) 
                       FROM tmpGanadores g
                       LIMIT 1
                       ;
                
                                
                    END LOOP;
                    CLOSE curPuntos;
                    SET done = FALSE;
                    
                 
                     -- -- Select * from vwGanadoresPuntos3;
                     -- select * from tmpGanadoresPremios;
                     -- LEAVE execute_proc;
                
                
                
                   
                    SELECT * FROM `tmpGanadoresPremios`;
                
                
                
                 ELSE
                
                
                
                     /************************** NORMAL  *********************/
                    /*Creo tabla temporal para cantidad de ganadores por pronostico*/
                    DROP TABLE IF EXISTS tmpGanadoresPronostico;
                    CREATE TABLE tmpGanadoresPronostico
                    SELECT g.CIdEventoDetalle, g.CIdEventoDetPronostico, COUNT(*) as NNuCanGanadores
                    FROM tmpGanadores g
                    GROUP BY g.CIdEventoDetalle, g.CIdEventoDetPronostico;
                    
                
                   /*Creo tabla temporal para distribucion de los premios segun pronostico*/
                   /*Obtengo los % de participacion de los distintos pronosticos sobre el total acumulado del evento*/
                   DROP TABLE IF EXISTS tmpGanadoresPremios;
                   CREATE TABLE tmpGanadoresPremios
                   SELECT 
                       ed.`CIdEventoDetalle`, 
                       edp.`CIdEventoDetPronostico`, 
                       edp.`CNomEventoPronostico`, 
                       g.NNuCanGanadores,
                       CONVERT( 0, DECIMAL(8,2)) as NFlTotalAcumulado, 
                       CONVERT( 0, DECIMAL(8,2)) as NFlTotalPremios,
                       CONVERT( 0, DECIMAL(8,2)) as NFlPorcDistrib,
                       CONVERT( 0, DECIMAL(8,2)) as NFlTotalDistrib,
                       CONVERT( 0, DECIMAL(8,2)) as NFlValorGanador,         
                       CONVERT( SUM( ced.`NFlTotalEvento`), DECIMAL(8,2)) as  NFlTotalEvento
                   FROM 
                       `tblclienteeventodet` ced 
                       Left Outer join `tblclienteeventodetcomp` cedc ON ced.`CIdClientEventoDet` = cedc.`CIdClientEventoDet`
                       Left Outer Join `tblclienteeventodetcomppronos` cedcp ON cedc.`CIdClienteEventoDetComp` = cedcp.`CIdClienteEventoDetComp`
                       Left Outer Join `tbleventodetpronostico` edp ON cedcp.`CIdEventoDetPronostico` = edp.`CIdEventoDetPronostico`
                       Inner Join `tbleventodetalle` ed ON ced.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                       Inner Join `tblevento` e ON ed.`CIdEvento` = e.`CIdEvento`
                       Inner Join `tmpGanadoresPronostico` g ON edp.`CIdEventoDetPronostico` = g.CIdEventoDetPronostico and edp.`CIdEventoDetalle` = g.CIdEventoDetalle
                   WHERE 
                       e.`CIdEvento` = @prmCIdEvento
                       And edp.`CNomEventoPronostico` is not null
                   GROUP BY 
                       ed.`CIdEventoDetalle`
                     , edp.`CIdEventoDetPronostico`
                     , edp.`CNomEventoPronostico`
                     , g.NNuCanGanadores;
                   
                   -- select @total_acumulado, @valor_premios, @porcentaje_premios;
                   -- LEAVE execute_proc;
                   
                   -- select * from tmpGanadoresPremios;
                   -- LEAVE execute_proc;
                
                   
                   UPDATE `tmpGanadoresPremios`
                   SET 
                   NFlTotalAcumulado = @total_acumulado ,
                   NFlTotalPremios = @valor_premios,
                   NFlPorcDistrib = @porcentaje_premios,  
                   NFlTotalDistrib = IFNULL(((`tmpGanadoresPremios`.`NFlTotalEvento`/@total_acumulado)*@valor_premios),0)  ,
                   NFlValorGanador = IFNULL((((`tmpGanadoresPremios`.`NFlTotalEvento`/@total_acumulado)*@valor_premios) / `tmpGanadoresPremios`.`NNuCanGanadores`),0)
                   ;
                
                   -- select * from tmpGanadoresPremios;
                   -- LEAVE execute_proc;
                
                
                   SELECT * FROM `tmpGanadoresPremios`;
                   
                 END IF;
                
                 
                 
                
                 
                 
                
                 
                 
                END;    

            """
        ),

        migrations.RunSQL(
            """
                CREATE DEFINER = 'root'@'%' PROCEDURE `sps_premiosEventoListado`(
                        IN `prmCIdEvento` VARCHAR(36)
                    )
                    NOT DETERMINISTIC
                    CONTAINS SQL
                    SQL SECURITY DEFINER
                    COMMENT ''
                execute_proc:
                BEGIN
                 
                 /*ZONA DE DECLARACIONES DE VARIABLES y OBJETOS*/
                 declare total_acumulado float;
                 declare porcentaje_premios float;
                 declare valor_premios float;
                 declare tipoEvento CHAR(1); 
                 
                 DECLARE done INT DEFAULT FALSE; 
                 DECLARE done2 INT DEFAULT FALSE; 
                
                 DECLARE CIdEvento varchar(36);
                 DECLARE CIdEventoDetalle varchar(36);
                 DECLARE CIdClientEventoDet varchar(36);
                 DECLARE CIdCliente varchar(36);
                 DECLARE NNuCanGanadores integer;
                 DECLARE NNuCanPuntos integer;
                 DECLARE NFlPorcPuntos float;
                
                 DECLARE NFlTotalAcumulado float;
                 DECLARE NFlTotalPremios float;
                 DECLARE NFlPorcDistrib float;
                 DECLARE NFlTotalDistrib float;
                 DECLARE NFlValorGanador float;
                 DECLARE NFlTotalEvento float;
                
                
                
                 DECLARE CIdEventoResulPronostico varchar(36);
                 DECLARE CIdEventoDetPronostico varchar(36);
                 DECLARE CNomEventoPronostico varchar(100);
                
                 DECLARE CIdEventoDetCompetidor varchar(36);
                 DECLARE CTxEventoResulComA varchar(50);
                 DECLARE CTxEventoResulComB varchar(50);
                
                 /********* CURSORES *******/
                
                 -- Cursor PRONOSTICOS
                 DECLARE curPronos CURSOR FOR 
                 SELECT erp.`CidEventoResulPronostico`, erp.`CIdEventoDetPronostico`, 
                 erp.`CIdEventoDetCompetidor`, erp.`CTxEventoResulComA`, erp.`CTxEventoResulComB`
                 FROM `tbleventoresulpronostico` as erp
                 INNER JOIN `tbleventodetpronostico` as edp ON `erp`.`CIdEventoDetPronostico`= edp.`CIdEventoDetPronostico`
                 INNER JOIN `tbleventodetalle` as ed ON edp.`CIdEventoDetalle`=ed.`CIdEventoDetalle`
                 INNER JOIN `tblevento` as e ON ed.`CIdEvento`=e.`CIdEvento`
                 WHERE e.`CIdEvento` = @prmCIdEvento;
                
                 -- Cursor PUNTOS
                 DECLARE curPuntos CURSOR FOR 
                 SELECT v.CIdEvento, v.NNuCanPuntos, ep.`NFlPorcPuntos` , Count(v.NNuCanPuntos) as NNuCanGanadores 
                 FROM vwGanadoresPuntos3  v
                 INNER JOIN `tbleventopunto` ep 
                       ON v.`CIdEvento`=ep.`CIdEvento`
                       AND  v.`NNuCanPuntos`=ep.`NCanPuntos`
                 GROUP BY v.`CIdEvento`, v.`NNuCanPuntos`, ep.`NFlPorcPuntos`;
                 
                 DECLARE curPuntosCompleto CURSOR FOR 
                 SELECT v.CIdEvento, v.CIdEventoDetalle, v.CIdCliente, v.NNuCanPuntos  
                 FROM vwGanadoresPuntos4  v;
                
                 -- Cursor PREMIOS
                 DECLARE curPremios CURSOR FOR 
                 SELECT v.CIdEventoDetPronostico, v.CNomEventoPronostico, v.NNuCanGanadores
                 , v.NFlTotalAcumulado, v.NFlTotalPremios, v.NFlPorcDistrib, v.NFlTotalDistrib
                 , v.NFlValorGanador, v.NFlTotalEvento
                 FROM vwGanadoresPremios v ;
                
                
                 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
                 
                 
                 /*ZONA DE INICIALIZACION DE VARIABLES*/ 
                 set total_acumulado :=0;
                 set porcentaje_premios :=0;
                 set valor_premios :=0;
                
                
                 /*Obtengo el acumulado del evento*/
                 SET @total_acumulado := (
                 select SUM(ced.`NFlTotalEvento`) as NFlTotalEvento
                 from `tblclienteeventodet` ced 
                 Left Outer join `tblclienteeventodetcomp` cedc ON ced.`CIdClientEventoDet` = cedc.`CIdClientEventoDet`
                 Left Outer Join `tblclienteeventodetcomppronos` cedcp ON cedc.`CIdClienteEventoDetComp` = cedcp.`CIdClienteEventoDetComp`
                 Left Outer Join `tbleventodetpronostico` edp ON cedcp.`CIdEventoDetPronostico` = edp.`CIdEventoDetPronostico`
                 Inner Join `tbleventodetalle` ed ON ced.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                 Inner Join `tblevento` e ON ed.`CIdEvento` = e.`CIdEvento`
                 Where e.`CIdEvento` = @prmCIdEvento
                 And edp.`CNomEventoPronostico` is not null 
                 );
                
                
                
                 /*Obtengo el porcentaje de premios*/
                 SET @porcentaje_premios := (
                 Select e.`NFlPorcGanadores` 
                 From `tblevento` as e
                 Where e.`CIdEvento` = @prmCIdEvento
                 );
                
                 
                 
                 /*Obtengo el tipo de evento*/
                 SET @tipoEvento := (
                 SELECT e.`CSNMultiple` 
                 FROM `tblevento` as e
                 WHERE e.`CIdEvento` = @prmCIdEvento
                 );
                 
                    
                 
                 /*Calculo el valor de premios*/
                 SET @valor_premios:= (@porcentaje_premios/100) * @total_acumulado;
                 
                 /*select @total_acumulado, @porcentaje_premios, @valor_premios;*/
                 
                 /*************************** Obtener clientes ganadores *********************/
                
                 /*Creo tabla temporal para ganadores*/
                 DROP TABLE IF EXISTS tmpGanadores;
                 CREATE TABLE tmpGanadores 
                 SELECT cedcp.*, ced.`CIdEventoDetalle`, ced.`CIdCliente`
                 FROM `tblclienteeventodetcomppronos` cedcp
                 INNER JOIN `tblclienteeventodetcomp` cedc ON cedcp.`CIdClienteEventoDetComp` = cedc.`CIdClienteEventoDetComp`
                 INNER JOIN `tblclienteeventodet` ced ON `cedc`.`CIdClientEventoDet` = ced.`CIdEventoDetalle`
                 WHERE 1=2;
                 
                
                 /*obtengo los registro de clientes que solo tengan resultados ganadores*/
                 OPEN curPronos;
                 
                 read_loop:LOOP
                 FETCH curPronos INTO 
                 CidEventoResulPronostico, CIdEventoDetPronostico, CIdEventoDetCompetidor, CTxEventoResulComA, CTxEventoResulComB;
                 
                 IF done THEN
                    LEAVE read_loop;
                 END IF;
                
                 INSERT INTO tmpGanadores
                 SELECT cedcp.*, `ced`.`CIdEventoDetalle`, ced.`CIdCliente`
                 FROM `tblclienteeventodetcomppronos` as cedcp
                 INNER JOIN `tblclienteeventodetcomp` as cedc ON cedcp.`CIdClienteEventoDetComp` = `cedc`.`CIdClienteEventoDetComp`
                 INNER JOIN `tblclienteeventodet` as ced ON cedc.`CIdClientEventoDet` = ced.`CIdClientEventoDet`
                 WHERE cedcp.`CIdEventoDetPronostico` = CIdEventoDetPronostico
                 AND cedc.`CIdEventoDetCompetidor` = CIdEventoDetCompetidor;
                 
                 END LOOP;
                
                 CLOSE curPronos;
                 SET done = FALSE;
                 
                
                 /*** PARA VER GANADORES **/
                 -- select * from tmpGanadores;
                 -- LEAVE execute_proc;
                
                 -- Dynamic view definition and creation
                
                 SET @v = concat('
                   CREATE OR REPLACE VIEW vwGanadoresPuntos as 
                   SELECT ed.`CIdEvento`, g.`CIdEventoDetalle`, ced.`CIdCliente`, COUNT(*) as NNuCanPuntos
                   FROM tmpGanadores as g
                   INNER JOIN `tbleventodetalle` ed ON g.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                   INNER JOIN `tblclienteeventodetcomp` cedc ON g.`CIdClienteEventoDetComp` = cedc.`CIdClienteEventoDetComp`
                   INNER JOIN `tblclienteeventodet` ced ON cedc.`CIdClientEventoDet` = ced.`CIdClientEventoDet`
                   GROUP BY ed.`CIdEvento`, g.`CIdEventoDetalle`, ced.`CIdCliente`;
                 ');
                
                
                 SET @v2 = concat('
                   CREATE OR REPLACE VIEW vwGanadoresPuntos2 as 
                   SELECT ed.`CIdEvento`, ed.`CIdEventoDetalle`, ced.`CIdCliente`, 0 as NNuCanPuntos
                   FROM `tblclienteeventodet` ced 
                   INNER JOIN `tbleventodetalle` ed ON ced.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                   WHERE ced.`CIdCliente` NOT IN (Select CIdCliente From vwGanadoresPuntos)
                   ;
                 ');
                
                 SET @v3 = concat('
                   CREATE OR REPLACE VIEW vwGanadoresPuntos3 as 
                   SELECT CIdEvento, CIdEventoDetalle, CIdCliente, NNuCanPuntos FROM vwGanadoresPuntos 
                   UNION ALL
                   SELECT CIdEvento, CIdEventoDetalle, CIdCliente, NNuCanPuntos FROM vwGanadoresPuntos2 
                   ;
                 ');
                
                
                 
                 IF @tipoEvento = 'T' THEN    
                
                    /************************** GOLAZO  *********************/
                
                    PREPARE stm FROM @v;
                    EXECUTE stm;
                    DEALLOCATE PREPARE stm;
                
                    PREPARE stm FROM @v2;
                    EXECUTE stm;
                    DEALLOCATE PREPARE stm;
                
                    PREPARE stm FROM @v3;
                    EXECUTE stm;
                    DEALLOCATE PREPARE stm;
                    
                    -- select * from vwGanadoresPuntos3;
                    -- LEAVE execute_proc;
                    
                
                    /*** Para ver el UNION ***    
                    SELECT v.CIdEvento, v.NNuCanPuntos, ep.`NFlPorcPuntos` , Count(v.NNuCanPuntos) as NNuCanGanadores 
                    FROM vwGanadoresPuntos3  v
                    INNER JOIN `tbleventopunto` ep 
                         ON v.`CIdEvento`=ep.`CIdEvento`
                         AND  v.`NNuCanPuntos`=ep.`NCanPuntos`
                    GROUP BY v.`CIdEvento`, v.`NNuCanPuntos`, ep.`NFlPorcPuntos`;
                    LEAVE execute_proc;
                    */
                    
                
                    DROP TABLE IF EXISTS tmpGanadoresPremios;
                    CREATE TABLE tmpGanadoresPremios
                    SELECT 
                     CONVERT( '0', CHAR(36)) as CIdEventoDetalle,
                     CONVERT( '0', CHAR(36)) as CIdEventoDetPronostico, 
                     CONVERT( '', CHAR(36)) as CNomEventoPronostico, 
                     CONVERT( 0, DECIMAL(8,0)) as NNuCanGanadores,
                     CONVERT( 0, DECIMAL(8,2)) as NFlTotalAcumulado, 
                     CONVERT( 0, DECIMAL(8,2)) as NFlTotalPremios,
                     CONVERT( 0, DECIMAL(8,2)) as NFlPorcDistrib,
                     CONVERT( 0, DECIMAL(8,2)) as NFlTotalDistrib,
                     CONVERT( 0, DECIMAL(8,2)) as NFlValorGanador,         
                     CONVERT( 0, DECIMAL(8,2)) as  NFlTotalEvento
                    ;
                    DELETE FROM tmpGanadoresPremios;
                
                    -- Open cursor PUNTOS
                    OPEN curPuntos;
                    read_puntos: LOOP
                      FETCH curPuntos 
                      INTO CIdEvento, NNuCanPuntos, NFlPorcPuntos , NNuCanGanadores;
                
                      IF done THEN
                        LEAVE read_puntos;
                      END IF;
                
                      INSERT INTO tmpGanadoresPremios
                      SELECT
                         g.`CIdEventoDetalle`, 
                         CONVERT( NNuCanPuntos, CHAR(36) ), 
                         CONVERT( NFlPorcPuntos, CHAR(36) ), 
                         NNuCanGanadores,
                         CONVERT( @total_acumulado, DECIMAL(8,2)), 
                         CONVERT( @valor_premios, DECIMAL(8,2)),
                         CONVERT( NFlPorcPuntos, DECIMAL(8,2)),
                         CONVERT( (@valor_premios * (NFlPorcPuntos/100)), DECIMAL(8,2)) ,
                         CONVERT( ((@valor_premios * (NFlPorcPuntos/100)) / NNuCanGanadores), DECIMAL(8,2)),         
                         CONVERT( 0, DECIMAL(8,2)) 
                       FROM tmpGanadores g
                       LIMIT 1
                       ;
                
                                
                    END LOOP;
                    CLOSE curPuntos;
                    SET done = FALSE;
                    
                 
                     -- -- Select * from vwGanadoresPuntos3;
                     -- select * from tmpGanadoresPremios;
                     -- LEAVE execute_proc;
                
                
                    DROP TABLE IF EXISTS tmpGanadoresPremiosListado;
                    CREATE TABLE tmpGanadoresPremiosListado 
                    SELECT 
                        CONVERT('', CHAR(36)) as CIdClienteEventoDetCompPronos,
                        CONVERT('', CHAR(36)) as CIdEventoDetPronostico,
                        CONVERT('', CHAR(36)) as CIdClienteEventoDetComp,
                        CONVERT('', CHAR(36)) as CCeClienteEventoDetCompPronos,
                        CONVERT(0, DECIMAL(8,2)) as NVrTarifa,
                        CONVERT('', CHAR(36)) as CIdEventoDetalle,
                        CONVERT(0, DECIMAL(8,2)) as NFlValorGanador,
                        CONVERT('', CHAR(100)) as CNomEvento,
                        CONVERT('', CHAR(150)) as CNomCompetidor,
                        CONVERT('', CHAR(100)) as CNomEventoPronostico,
                        CONVERT('', CHAR(150)) as CNomPersona,
                        CONVERT('', CHAR(36)) as CIdCliente
                      ;
                
                    DELETE FROM tmpGanadoresPremiosListado ;
                
                
                
                    /*------------------------------ INICIO: Proceso los clientes que acertaron ------------------------------------------------*/
                    SET @v4 = concat('
                     CREATE OR REPLACE VIEW vwGanadoresPremios as 
                     SELECT v.CIdEventoDetPronostico, v.CNomEventoPronostico, v.NNuCanGanadores
                     , v.NFlTotalAcumulado, v.NFlTotalPremios, v.NFlPorcDistrib, v.NFlTotalDistrib
                     , v.NFlValorGanador, v.NFlTotalEvento
                     FROM tmpGanadoresPremios v
                     WHERE CONVERT(v.CIdEventoDetPronostico, DECIMAL(8,0))>0
                     ORDER BY CONVERT(v.CIdEventoDetPronostico, DECIMAL(8,0))
                     ;
                   ');
                 
                    PREPARE stm FROM @v4;
                    EXECUTE stm;
                    DEALLOCATE PREPARE stm; 
                    
                    -- Select * from vwGanadoresPremios;  
                    -- LEAVE execute_proc;  
                    
                
                    -- Open cursor PREMIOS
                    OPEN curPremios;
                    read_premios: LOOP
                      FETCH curPremios 
                      INTO 
                       CIdEventoDetPronostico, CNomEventoPronostico, NNuCanGanadores
                     , NFlTotalAcumulado, NFlTotalPremios, NFlPorcDistrib, NFlTotalDistrib
                     , NFlValorGanador, NFlTotalEvento;
                       
                 
                        IF done THEN
                          LEAVE read_premios;
                        END IF;
                
                
                         SET @v5 = concat('
                         CREATE OR REPLACE VIEW vwGanadoresPuntos4 as 
                         SELECT v.CIdEvento, v.CIdEventoDetalle, v.CIdCliente, v.NNuCanPuntos 
                         FROM vwGanadoresPuntos3 v
                         WHERE v.NNuCanPuntos = ',CIdEventoDetPronostico,';');
                
                        PREPARE stm FROM @v5;
                        EXECUTE stm;
                        DEALLOCATE PREPARE stm; 
                        
                        -- Select * from vwGanadoresPuntos4;  
                        -- LEAVE execute_proc;         
                        
                        -- Open cursor PUNTOSCOMPLETO - CURSOR ANIDADO
                        SET done2=done;
                        SET done=FALSE;
                        OPEN curPuntosCompleto;
                        read_puntoscompleto: LOOP
                          FETCH curPuntosCompleto 
                          INTO 
                           CIdEvento, CIdEventoDetalle, CIdCliente, NNuCanPuntos;
                           
                            IF done THEN
                              LEAVE read_puntoscompleto;
                            END IF;
                
                            -- select g.* from tmpGanadores g where g.CIdCliente=CIdCliente;
                            -- LEAVE execute_proc;
                
                            INSERT INTO tmpGanadoresPremiosListado
                            SELECT 
                              g.`CIdClienteEventoDetCompPronos`,
                              g.`CIdEventoDetPronostico`,
                              g.`CIdClienteEventoDetComp`,
                              g.`CCeClienteEventoDetCompPronos`,
                              g.`NVrTarifa`,
                              g.`CIdEventoDetalle`,
                              NFlValorGanador,
                              CONCAT(e.`CNomEvento`, ' / ' ,ed.`CNomDetalle` ),
                              concat(edc.`CNomCompetidorA` , IF(LENGTH(edc.`CNomCompetidorB`)>0 ,' Vs ', '') , edc.`CNomCompetidorB`),
                              edp.`CNomEventoPronostico`,
                              CONCAT(p.`CNomPersona`, ' ', p.`CApePersona`),
                              g.`CIdCliente`
                            FROM tmpGanadores g 
                            INNER JOIN `tbleventodetalle` ed ON g.`CIdEventoDetalle`=ed.`CIdEventoDetalle`
                            INNER JOIN `tblevento` e ON ed.`CIdEvento`=e.`CIdEvento`
                            
                            INNER JOIN `tblclienteeventodetcomp` cedc ON g.`CIdClienteEventoDetComp` = cedc.`CIdClienteEventoDetComp`
                            INNER JOIN `tbleventodetcompetidor` edc ON cedc.`CIdEventoDetCompetidor`=edc.`CIdEventoDetCompetidor`
                            
                            INNER JOIN `tblclienteeventodetcomppronos` cedcp ON g.`CIdClienteEventoDetCompPronos`=cedcp.`CIdClienteEventoDetCompPronos`
                            INNER JOIN `tbleventodetpronostico` edp ON cedcp.`CIdEventoDetPronostico`=edp.`CIdEventoDetPronostico`
                            
                            INNER JOIN `tblcliente` c ON g.`CIdCliente`=c.`CIdCliente`
                            INNER JOIN `tblrolusuario` ru ON c.`CIdRolUsuario`=`ru`.`CIdRolUsuario`
                            INNER JOIN `tblusuario` u ON `ru`.`CIdUsuario`=u.`CIdUsuario`
                            INNER JOIN `tblpersona` p ON u.`CIdPersona`=p.`CIdPersona`
                            
                            WHERE g.CIdCliente=CIdCliente; 
                
                            
                                   
                        END LOOP;
                        CLOSE curPuntosCompleto;
                        SET done = done2;
                        SET done2 = FALSE;
                
                
                
                
                        
                        /*
                        SELECT v3.* FROM vwGanadoresPuntos3 v3
                        Where CONVERT( v3.NNuCanPuntos, decimal(8,0))=CONVERT( CIdEventoDetPronostico, decimal(8,0));
                        LEAVE execute_proc;
                        */
                        
                               
                    END LOOP;
                    CLOSE curPremios;
                    SET done = FALSE;
                
                    /*------------------------------ FIN: Proceso los clientes que ACERTARON ------------------------------------------------*/
                
                      
                    /*------------------------------ INICIO: Proceso los clientes que NO ACERTARON ------------------------------------------------*/
                    SET @v4 = concat('
                     CREATE OR REPLACE VIEW vwGanadoresPremios as 
                     SELECT v.CIdEventoDetPronostico, v.CNomEventoPronostico, v.NNuCanGanadores
                     , v.NFlTotalAcumulado, v.NFlTotalPremios, v.NFlPorcDistrib, v.NFlTotalDistrib
                     , v.NFlValorGanador, v.NFlTotalEvento
                     FROM tmpGanadoresPremios v
                     WHERE CONVERT(v.CIdEventoDetPronostico, DECIMAL(8,0))=0
                     ORDER BY CONVERT(v.CIdEventoDetPronostico, DECIMAL(8,0))
                     ;
                   ');
                 
                    PREPARE stm FROM @v4;
                    EXECUTE stm;
                    DEALLOCATE PREPARE stm; 
                    
                    -- Select * from vwGanadoresPremios;  
                    -- LEAVE execute_proc;  
                    
                
                    -- Open cursor PREMIOS
                    OPEN curPremios;
                    read_premios: LOOP
                      FETCH curPremios 
                      INTO 
                       CIdEventoDetPronostico, CNomEventoPronostico, NNuCanGanadores
                     , NFlTotalAcumulado, NFlTotalPremios, NFlPorcDistrib, NFlTotalDistrib
                     , NFlValorGanador, NFlTotalEvento;
                       
                 
                        IF done THEN
                          LEAVE read_premios;
                        END IF;
                
                
                         SET @v5 = concat('
                         CREATE OR REPLACE VIEW vwGanadoresPuntos4 as 
                         SELECT v.CIdEvento, v.CIdEventoDetalle, v.CIdCliente, v.NNuCanPuntos 
                         FROM vwGanadoresPuntos3 v
                         WHERE v.NNuCanPuntos = ',CIdEventoDetPronostico,';');
                
                        PREPARE stm FROM @v5;
                        EXECUTE stm;
                        DEALLOCATE PREPARE stm; 
                        
                        -- Select * from vwGanadoresPuntos4;  
                        -- LEAVE execute_proc;         
                        
                        -- Open cursor PUNTOSCOMPLETO - CURSOR ANIDADO
                        SET done2=done;
                        SET done=FALSE;
                        OPEN curPuntosCompleto;
                        read_puntoscompleto: LOOP
                          FETCH curPuntosCompleto 
                          INTO 
                           CIdEvento, CIdEventoDetalle, CIdCliente, NNuCanPuntos;
                           
                            IF done THEN
                              LEAVE read_puntoscompleto;
                            END IF;
                
                            -- select g.* from tmpGanadores g where g.CIdCliente=CIdCliente;
                            -- LEAVE execute_proc;
                
                            INSERT INTO tmpGanadoresPremiosListado
                            SELECT 
                              cedcp.`CIdClienteEventoDetCompPronos`,
                              cedcp.`CIdEventoDetPronostico`,
                              cedcp.`CIdClienteEventoDetComp`,
                              cedcp.`CCeClienteEventoDetCompPronos`,
                              cedcp.`NVrTarifa`,
                              g.`CIdEventoDetalle`,
                              NFlValorGanador,
                              CONCAT(e.`CNomEvento`, ' / ' ,ed.`CNomDetalle` ),
                              concat(edc.`CNomCompetidorA` , IF(LENGTH(edc.`CNomCompetidorB`)>0 ,' Vs ', '') , edc.`CNomCompetidorB`),
                              edp.`CNomEventoPronostico`,
                              CONCAT(p.`CNomPersona`, ' ', p.`CApePersona`),
                              g.`CIdCliente`
                            FROM `tblclienteeventodet` g 
                
                            INNER JOIN `tblclienteeventodetcomp` cedc ON g.`CIdClientEventoDet` = cedc.`CIdClientEventoDet`
                            INNER JOIN `tbleventodetcompetidor` edc ON cedc.`CIdEventoDetCompetidor`=edc.`CIdEventoDetCompetidor`
                
                            INNER JOIN `tblclienteeventodetcomppronos` cedcp ON cedc.`CIdClienteEventoDetComp`=cedcp.`CIdClienteEventoDetComp`
                            INNER JOIN `tbleventodetpronostico` edp ON cedcp.`CIdEventoDetPronostico`=edp.`CIdEventoDetPronostico`
                            
                            INNER JOIN `tbleventodetalle` ed ON g.`CIdEventoDetalle`=ed.`CIdEventoDetalle`
                            INNER JOIN `tblevento` e ON ed.`CIdEvento`=e.`CIdEvento`
                            
                            
                            
                            INNER JOIN `tblcliente` c ON g.`CIdCliente`=c.`CIdCliente`
                            INNER JOIN `tblrolusuario` ru ON c.`CIdRolUsuario`=`ru`.`CIdRolUsuario`
                            INNER JOIN `tblusuario` u ON `ru`.`CIdUsuario`=u.`CIdUsuario`
                            INNER JOIN `tblpersona` p ON u.`CIdPersona`=p.`CIdPersona`
                            
                            WHERE g.CIdCliente=CIdCliente AND g.`CIdEventoDetalle`=CIdEventoDetalle; 
                
                            
                                   
                        END LOOP;
                        CLOSE curPuntosCompleto;
                        SET done = done2;
                        SET done2 = FALSE;
                
                
                
                
                        
                        /*
                        SELECT v3.* FROM vwGanadoresPuntos3 v3
                        Where CONVERT( v3.NNuCanPuntos, decimal(8,0))=CONVERT( CIdEventoDetPronostico, decimal(8,0));
                        LEAVE execute_proc;
                        */
                        
                               
                    END LOOP;
                    CLOSE curPremios;
                    SET done = FALSE;
                
                    /*------------------------------ FIN: Proceso los clientes que NO ACERTARON ------------------------------------------------*/
                
                   
                    SELECT * FROM tmpGanadoresPremiosListado ORDER BY CNomPersona;
                
                
                
                 ELSE
                
                
                
                     /************************** NORMAL  *********************/
                    /*Creo tabla temporal para cantidad de ganadores por pronostico*/
                    DROP TABLE IF EXISTS tmpGanadoresPronostico;
                    CREATE TABLE tmpGanadoresPronostico
                    SELECT g.CIdEventoDetalle, g.CIdEventoDetPronostico, COUNT(*) as NNuCanGanadores
                    FROM tmpGanadores g
                    GROUP BY g.CIdEventoDetalle, g.CIdEventoDetPronostico;
                    
                
                   /*Creo tabla temporal para distribucion de los premios segun pronostico*/
                   /*Obtengo los % de participacion de los distintos pronosticos sobre el total acumulado del evento*/
                   DROP TABLE IF EXISTS tmpGanadoresPremios;
                   CREATE TABLE tmpGanadoresPremios
                   SELECT 
                       ed.`CIdEventoDetalle`, 
                       edp.`CIdEventoDetPronostico`, 
                       edp.`CNomEventoPronostico`, 
                       g.NNuCanGanadores,
                       CONVERT( 0, DECIMAL(8,2)) as NFlTotalAcumulado, 
                       CONVERT( 0, DECIMAL(8,2)) as NFlTotalPremios,
                       CONVERT( 0, DECIMAL(8,2)) as NFlPorcDistrib,
                       CONVERT( 0, DECIMAL(8,2)) as NFlTotalDistrib,
                       CONVERT( 0, DECIMAL(8,2)) as NFlValorGanador,         
                       CONVERT( SUM( ced.`NFlTotalEvento`), DECIMAL(8,2)) as  NFlTotalEvento
                   FROM 
                       `tblclienteeventodet` ced 
                       Left Outer join `tblclienteeventodetcomp` cedc ON ced.`CIdClientEventoDet` = cedc.`CIdClientEventoDet`
                       Left Outer Join `tblclienteeventodetcomppronos` cedcp ON cedc.`CIdClienteEventoDetComp` = cedcp.`CIdClienteEventoDetComp`
                       Left Outer Join `tbleventodetpronostico` edp ON cedcp.`CIdEventoDetPronostico` = edp.`CIdEventoDetPronostico`
                       Inner Join `tbleventodetalle` ed ON ced.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                       Inner Join `tblevento` e ON ed.`CIdEvento` = e.`CIdEvento`
                       Inner Join `tmpGanadoresPronostico` g ON edp.`CIdEventoDetPronostico` = g.CIdEventoDetPronostico and edp.`CIdEventoDetalle` = g.CIdEventoDetalle
                   WHERE 
                       e.`CIdEvento` = @prmCIdEvento
                       And edp.`CNomEventoPronostico` is not null
                   GROUP BY 
                       ed.`CIdEventoDetalle`
                     , edp.`CIdEventoDetPronostico`
                     , edp.`CNomEventoPronostico`
                     , g.NNuCanGanadores;
                   
                   -- select @total_acumulado, @valor_premios, @porcentaje_premios;
                   -- LEAVE execute_proc;
                   
                   -- select * from tmpGanadoresPremios;
                   -- LEAVE execute_proc;
                
                   
                   UPDATE `tmpGanadoresPremios`
                   SET 
                   NFlTotalAcumulado = @total_acumulado ,
                   NFlTotalPremios = @valor_premios,
                   NFlPorcDistrib = @porcentaje_premios,  
                   NFlTotalDistrib = IFNULL(((`tmpGanadoresPremios`.`NFlTotalEvento`/@total_acumulado)*@valor_premios),0)  ,
                   NFlValorGanador = IFNULL((((`tmpGanadoresPremios`.`NFlTotalEvento`/@total_acumulado)*@valor_premios) / `tmpGanadoresPremios`.`NNuCanGanadores`),0)
                   ;
                
                   -- select * from tmpGanadoresPremios;
                   -- LEAVE execute_proc;
                
                
                 /*SELECT * FROM `tmpGanadoresPremios`;*/
                 DROP TABLE IF EXISTS tmpGanadoresPremiosListado;
                 CREATE TABLE tmpGanadoresPremiosListado 
                   SELECT g.*
                   , gp.`NFlValorGanador`
                   , e.`CNomEvento`
                   , concat(edc.`CNomCompetidorA` , IF(LENGTH(edc.`CNomCompetidorB`)>0 ,' Vs ', '') , edc.`CNomCompetidorB`) as CNomCompetidor
                   , edp.`CNomEventoPronostico`
                   , concat( p.`CNomPersona`, ' ', p.CApePersona) as CNomPersona
                   -- , ced.`CIdCliente`
                   FROM `tmpGanadores` g
                   INNER JOIN tmpGanadoresPremios gp ON g.`CIdEventoDetPronostico` = `gp`.`CIdEventoDetPronostico`
                   INNER JOIN `tbleventodetalle` ed ON g.`CIdEventoDetalle` = ed.`CIdEventoDetalle`
                   INNER JOIN `tblevento` e ON ed.`CIdEvento` = e.`CIdEvento`
                   INNER JOIN `tblclienteeventodetcomp` cedc ON g.`CIdClienteEventoDetComp` = cedc.`CIdClienteEventoDetComp`
                   INNER JOIN `tbleventodetcompetidor` edc ON cedc.`CIdEventoDetCompetidor` = `edc`.`CIdEventoDetCompetidor`
                   INNER JOIN `tbleventodetpronostico` edp ON g.`CIdEventoDetPronostico` = edp.`CIdEventoDetPronostico`
                   INNER JOIN `tblclienteeventodet` ced ON cedc.`CIdClientEventoDet` = ced.`CIdClientEventoDet`
                   INNER JOIN `tblcliente` c ON ced.`CIdCliente` = c.`CIdCliente`
                   INNER JOIN `tblrolusuario` ru ON c.`CIdRolUsuario` = ru.`CIdRolUsuario`
                   INNER JOIN `tblusuario` u ON ru.`CIdUsuario` = `u`.`CIdUsuario`
                   INNER JOIN `tblpersona` p ON u.`CIdPersona` = p.`CIdPersona`
                   ORDER BY edp.`CNomEventoPronostico`, p.`CNomPersona`;
                
                   SELECT * FROM tmpGanadoresPremiosListado ORDER BY CNomPersona;
                   
                 END IF;
                
                 
                 
                
                 
                 
                
                 
                 
                END;
            
            """
        ),

        migrations.RunSQL(
            """
                DROP PROCEDURE IF EXISTS `sps_premiosEventoLiquidar`;
                CREATE DEFINER = 'root'@'%' PROCEDURE `sps_premiosEventoLiquidar`(
                        IN `prmCIdEvento` VARCHAR(36)
                    )
                    NOT DETERMINISTIC
                    CONTAINS SQL
                    SQL SECURITY DEFINER
                    COMMENT ''
                proc_label: BEGIN
                  
                  DECLARE cursor_end CONDITION FOR SQLSTATE '02000';
                  DECLARE done INT DEFAULT FALSE; 
                
                  -- declaracion de variables
                  DECLARE curCIdClienteEventoDetCompPronos		VARCHAR(36);
                  DECLARE curCIdEventoDetPronostico				VARCHAR(36);
                  DECLARE curCIdClienteEventoDetComp			VARCHAR(36);
                  DECLARE curCCeClienteEventoDetCompPronos		VARCHAR(1);
                  DECLARE curNVrTarifa							FLOAT;
                  DECLARE curCIdEventoDetalle					VARCHAR(36);
                  DECLARE curNFlValorGanador					FLOAT;
                  DECLARE curCNomEvento							VARCHAR(255);
                  DECLARE curCNomCompetidor						VARCHAR(255);
                  DECLARE curCNomEventoPronostico				VARCHAR(255);
                  DECLARE curCNomPersona						VARCHAR(255);
                  DECLARE curCIdCliente							VARCHAR(36);
                  
                  DECLARE cursor_premios CURSOR FOR SELECT * FROM tmpGanadoresPremiosListado;  
                  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;    
                    
                
                  IF EXISTS(SELECT * FROM `tblevento` WHERE CIdEvento=@prmCIdEvento AND CSNLiquidado='S') THEN
                    SELECT 'LIQUIDADO' as CTxResultado;
                    LEAVE proc_label;
                  END IF;
                
                
                  SET @query = CONCAT("CALL `sps_premiosEventoListado`('", @prmCIdEvento , "')" );
                  PREPARE stmt1 FROM @query; 
                  EXECUTE stmt1; 
                  DEALLOCATE PREPARE stmt1; 
                
                  OPEN cursor_premios;
                  
                  read_loop:LOOP
                      FETCH cursor_premios INTO 
                        curCIdClienteEventoDetCompPronos, curCIdEventoDetPronostico, curCIdClienteEventoDetComp, curCCeClienteEventoDetCompPronos, curNVrTarifa,
                        curCIdEventoDetalle, curNFlValorGanador, curCNomEvento, curCNomCompetidor, curCNomEventoPronostico, curCNomPersona, curCIdCliente;
                       
                        IF done THEN
                           LEAVE read_loop;
                        END IF;
                
                      UPDATE `tblcliente` SET
                      NFlCreditoCliente = NFlCreditoCliente + 0.11
                      WHERE CIdCliente = curCIdCliente;
                     
                  END LOOP;
                
                  CLOSE cursor_premios;
                  
                  -- MARCO COMO LIQUIDADO EL EVENTO
                  UPDATE `tblevento` SET
                  CSNLiquidado='S', DFxLiquidado=NOW()
                  WHERE CIdEvento=@prmCIdEvento;
                  
                  
                  COMMIT;
                  
                  SELECT 'OK' as CTxResultado;
                 
                 
                END;
            
            """


        ),

        migrations.RunSQL(
            """
            DROP PROCEDURE IF EXISTS `sps_eventoactivoacumulado`;
            CREATE DEFINER = 'root'@'%' PROCEDURE `sps_eventoactivoacumulado`()
                NOT DETERMINISTIC
                CONTAINS SQL
                SQL SECURITY DEFINER
                COMMENT ''
            BEGIN
               DECLARE total_acumulado float;
               DECLARE imgUrl VARCHAR(500);
               
               SET imgUrl='';
            
               SET @imgUrl :=(
                      SELECT CTxTexto FROM `tblparametro` WHERE CIdParametro = 'imgurlGET'
               );
            
                SELECT 
                  e.`CIdEvento`
                , ed.`CIdEventoDetalle`
                , e.`CNomEvento`
                , ed.`CNomDetalle`
                , e.`DFxFin`
                , CONCAT(@imgUrl, ed.`CTxUrlIconoDetalle`) as CTxUrlIconoDetalle
                , SUM(IFNULL( ced.`NFlTotalEvento`,0)) as NFlTotalAcumulado
                , COUNT(IFNULL( ced.`CIdCliente`,0)) as NNuParticipantes
                FROM `tblevento` e
                INNER JOIN `tbleventodetalle` ed
                  ON e.`CIdEvento`=ed.`CIdEvento`
                LEFT OUTER JOIN `tblclienteeventodet` ced
                  ON ed.`CIdEventoDetalle`=ced.`CIdEventoDetalle`
                WHERE e.CCeEvento='A'
                AND e.CSNLiquidado='N'
                AND e.`DFxFin`>NOW()
                GROUP BY 
                  e.`CIdEvento`
                , ed.`CIdEventoDetalle`
                , e.`CNomEvento`
                , ed.`CNomDetalle`
                , e.`DFxFin`
                , CONCAT(@imgUrl, ed.`CTxUrlIconoDetalle`);
                
            
            END;    
            """

        ),

        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cellphone', models.CharField(blank=True, null=True, max_length=20)),
                ('dob', models.DateField(blank=True, null=True)),
                ('pin', models.IntegerField(blank=True, null=True)),
                ('country', models.CharField(blank=True, null=True, max_length=36)),
                ('picture', models.CharField(max_length=100, blank=False, null=False, default='user.png')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tblaplicacion',
            fields=[
                ('cidapp', models.CharField(db_column='CIdApp', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomapp', models.CharField(db_column='CNomApp', max_length=100, unique=True)),
                ('csnocultaropcnoautr', models.CharField(db_column='CSNOcultarOpcNoAutr', max_length=1)),
                ('csnaccesorapido', models.CharField(db_column='CSNAccesoRapido', max_length=1)),
                ('cceapp', models.CharField(db_column='CCeApp', max_length=1)),
            ],
            options={
                'verbose_name_plural': 'tblAplicaciones',
                'db_table': 'tblAplicacion',
                'ordering': ('cidapp',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblcliente',
            fields=[
                ('cidcliente', models.CharField(db_column='CIdCliente', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ccecliente', models.CharField(db_column='CCeCliente', default='A', max_length=1)),
                ('nflcreditocliente', models.FloatField(db_column='NFlCreditoCliente', default=0)),
            ],
            options={
                'verbose_name_plural': 'tblClientes',
                'db_table': 'tblCliente',
                'ordering': ('cidcliente',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblclienteeventodet',
            fields=[
                ('cidclienteventodet', models.CharField(db_column='CIdClientEventoDet', max_length=36, primary_key=True, serialize=False)),
                ('cceclienteeventodet', models.CharField(db_column='CCeClienteEventoDet', default='A', max_length=1)),
                ('nfltotalevento', models.FloatField(db_column='NFlTotalEvento', default=0)),
                ('dfxclienteeventodet', models.DateTimeField(db_column='DFxClienteEventoDet', default='CURRENT_DATETIME')),
                ('cidcliente', models.ForeignKey(db_column='CIdCliente', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblcliente')),
            ],
            options={
                'verbose_name_plural': 'tblClienteEventoDetalles',
                'db_table': 'tblClienteEventoDet',
                'ordering': ('cidclienteventodet',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblclienteeventodetcomp',
            fields=[
                ('cidclienteeventodetcomp', models.CharField(db_column='CIdClienteEventoDetComp', max_length=36, primary_key=True, serialize=False)),
                ('cceclienteeventodetcomp', models.CharField(db_column='CCeClienteEventoDetComp', default='A', max_length=1)),
                ('cidclienteventodet', models.ForeignKey(db_column='CIdClientEventoDet', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblclienteeventodet')),
            ],
            options={
                'verbose_name_plural': 'tblClienteEventoDetCompetidores',
                'db_table': 'tblClienteEventoDetComp',
                'ordering': ('cidclienteeventodetcomp',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblclienteeventodetcomppronos',
            fields=[
                ('cidclienteeventodetcomppronos', models.CharField(db_column='CIdClienteEventoDetCompPronos', max_length=36, primary_key=True, serialize=False)),
                ('cceclienteeventodetcomppronos', models.CharField(db_column='CCeClienteEventoDetCompPronos', default='A', max_length=1)),
                ('nvrtarifa', models.FloatField(db_column='NVrTarifa', default=0)),
                ('cidclienteeventodetcomp', models.ForeignKey(db_column='CIdClienteEventoDetComp', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblclienteeventodetcomp')),
            ],
            options={
                'verbose_name_plural': 'tblClienteEventoDetCompPronosticos',
                'db_table': 'tblClienteEventoDetCompPronos',
                'ordering': ('cidclienteeventodetcomppronos',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblclientetrans',
            fields=[
                ('cidclientetrans', models.CharField(db_column='CIdClienteTrans', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('dfxtrans', models.DateTimeField(db_column='DFxTrans')),
                ('nflvalor', models.FloatField(db_column='NFlValor')),
                ('cdstrans', models.CharField(blank=True, db_column='CDsTrans', max_length=500, null=True)),
                ('cceclientetrans', models.CharField(db_column='CCeClienteTrans', default='A', max_length=1)),
                ('cidcliente', models.ForeignKey(db_column='CIdCliente', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblcliente')),
            ],
            options={
                'verbose_name_plural': 'tblClienteTransacciones',
                'db_table': 'tblClienteTrans',
                'ordering': ('cidclientetrans',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblevento',
            fields=[
                ('cidevento', models.CharField(db_column='CIdEvento', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomevento', models.CharField(db_column='CNomEvento', max_length=255)),
                ('ctxurlicono', models.CharField(db_column='CTxUrlIcono', max_length=500)),
                ('cceevento', models.CharField(db_column='CCeEvento', default='A', max_length=1)),
                ('dfxinicio', models.DateTimeField(db_column='DFxInicio')),
                ('dfxfin', models.DateTimeField(db_column='DFxFin')),
                ('nflporcganadores', models.FloatField(db_column='NFlPorcGanadores', default=0)),
                ('nflporcutilidad', models.FloatField(db_column='NFlPorcUtilidad', default=0)),
                ('nflporcimpuestos', models.FloatField(db_column='NFlPorcImpuestos', default=0)),
                ('nflporccomision', models.FloatField(db_column='NFlPorcComision', default=0)),
                ('csnmultiple', models.CharField(db_column='CSNMultiple', default='N', max_length=1)),
                ('nvrevento', models.FloatField(db_column='NVrEvento', default=0.0)),
                ('nvrdobles', models.FloatField(db_column='NVrDobles', default=0.0)),
                ('nvrtriples', models.FloatField(db_column='NVrTriples', default=0.0)),
                ('ncandobles', models.IntegerField(db_column='NCanDobles', default=0)),
                ('ncantriples', models.IntegerField(db_column='NCanTriples', default=0)),
            ],
            options={
                'verbose_name_plural': 'tblEventos',
                'db_table': 'tblEvento',
                'ordering': ('cnomevento',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tbleventodetalle',
            fields=[
                ('cideventodetalle', models.CharField(db_column='CIdEventoDetalle', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomdetalle', models.CharField(db_column='CNomDetalle', max_length=255)),
                ('ctxurliconodetalle', models.CharField(db_column='CTxUrlIconoDetalle', max_length=500)),
                ('cceeventodetalle', models.CharField(db_column='CCeEventoDetalle', default='A', max_length=1)),
                ('cidevento', models.ForeignKey(db_column='CIdEvento', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblevento')),
            ],
            options={
                'verbose_name_plural': 'tblEventoDetalles',
                'db_table': 'tblEventoDetalle',
                'ordering': ('cnomdetalle',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tbleventodetcompetidor',
            fields=[
                ('cideventodetcompetidor', models.CharField(db_column='CIdEventoDetCompetidor', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomcompetidora', models.CharField(db_column='CNomCompetidorA', max_length=255)),
                ('cnomcompetidorb', models.CharField(blank=True, db_column='CNomCompetidorB', max_length=255, null=True)),
                ('cceeventodetcompetidor', models.CharField(db_column='CCeEventoDetCompetidor', default='A', max_length=1)),
                ('ctxurliconoa', models.CharField(db_column='CTxUrlIconoA', default='', max_length=500)),
                ('ctxurliconob', models.CharField(db_column='CTxUrlIconoB', default='', max_length=500)),
                ('cideventodetalle', models.ForeignKey(db_column='CIdEventoDetalle', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbleventodetalle')),
            ],
            options={
                'verbose_name_plural': 'tblEventoDetCompetidores',
                'db_table': 'tblEventoDetCompetidor',
                'ordering': ('cnomcompetidora',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tbleventodetpronostico',
            fields=[
                ('cideventodetpronostico', models.CharField(db_column='CIdEventoDetPronostico', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomeventopronostico', models.CharField(db_column='CNomEventoPronostico', max_length=100)),
                ('cceeventopronostico', models.CharField(db_column='CCeEventoPronostico', default='A', max_length=1)),
                ('ccicompetidor', models.CharField(db_column='CCiCompetidor', default='A', max_length=1)),
                ('cideventodetalle', models.ForeignKey(db_column='CIdEventoDetalle', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbleventodetalle')),
            ],
            options={
                'verbose_name_plural': 'tblEventoDetPronosticos',
                'db_table': 'tblEventoDetPronostico',
                'ordering': ('cnomeventopronostico',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tbleventoopcion',
            fields=[
                ('cideventoopc', models.CharField(db_column='CIdEventoOpc', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ccievento', models.CharField(db_column='CCiEvento', max_length=20)),
                ('cnomevento_en', models.CharField(db_column='CNomEvento_en', max_length=100)),
                ('cnomevento_es', models.CharField(db_column='CNomEvento_es', max_length=100)),
                ('cnomevento_ru', models.CharField(db_column='CNomEvento_ru', max_length=100)),
                ('cnomevento_zh', models.CharField(db_column='CNomEvento_zh', max_length=100)),
                ('ccisiglas', models.CharField(db_column='CCiSiglas', max_length=3)),
                ('nidpos', models.SmallIntegerField(db_column='NIdPos')),
                ('cceevento', models.CharField(db_column='CCeEvento', max_length=1)),
                ('cidapp', models.ForeignKey(db_column='CIdApp', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblaplicacion')),
            ],
            options={
                'verbose_name_plural': 'tblEventoOpciones',
                'db_table': 'tblEventoOpcion',
                'ordering': ('cideventoopc',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tbleventoresulpronostico',
            fields=[
                ('cideventoresulpronostico', models.CharField(db_column='CidEventoResulPronostico', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ctxeventoresulcoma', models.CharField(db_column='CTxEventoResulComA', default='', max_length=50)),
                ('ctxeventoresulcomb', models.CharField(blank=True, db_column='CTxEventoResulComB', default='', max_length=50, null=True)),
                ('cideventodetcompetidor', models.ForeignKey(db_column='CIdEventoDetCompetidor', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbleventodetcompetidor')),
                ('cideventodetpronostico', models.ForeignKey(db_column='CIdEventoDetPronostico', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbleventodetpronostico')),
            ],
            options={
                'verbose_name_plural': 'tblEventoResulPronosticos',
                'db_table': 'tblEventoResulPronostico',
                'ordering': ('cideventoresulpronostico',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblfuncion',
            fields=[
                ('cidfun', models.CharField(db_column='CIdFun', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ccifun', models.CharField(db_column='CCiFun', max_length=3)),
                ('cnomfun_en', models.CharField(db_column='CNomFun_en', max_length=100)),
                ('cnomfun_es', models.CharField(db_column='CNomFun_es', max_length=100)),
                ('cnomfun_ru', models.CharField(db_column='CNomFun_ru', max_length=100)),
                ('cnomfun_zh', models.CharField(db_column='CNomFun_zh', max_length=100)),
                ('nidpos', models.SmallIntegerField(db_column='NIdPos')),
                ('ccefun', models.CharField(db_column='CCeFun', max_length=1)),
                ('cidapp', models.ForeignKey(db_column='CIdApp', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblaplicacion')),
            ],
            options={
                'verbose_name_plural': 'tblFunciones',
                'db_table': 'tblFuncion',
                'ordering': ('cidfun',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblmensaje',
            fields=[
                ('cidmensaje', models.CharField(db_column='CIdMensaje', max_length=36, primary_key=True, serialize=False)),
                ('cdstipoalerta', models.CharField(db_column='CDsTipoAlerta', default='success', max_length=20)),
                ('nnuduracion', models.SmallIntegerField(db_column='NNuDuracion', default=3)),
                ('cdstitle_en', models.CharField(db_column='CDsTitle_en', default='', max_length=100)),
                ('cdstitle_es', models.CharField(db_column='CDsTitle_es', default='', max_length=100)),
                ('cdstitle_ru', models.CharField(db_column='CDsTitle_ru', default='', max_length=100)),
                ('cdstitle_zh', models.CharField(db_column='CDsTitle_zh', default='', max_length=100)),
                ('cdsmsje_en', models.CharField(db_column='CDsMsje_en', default='', max_length=500)),
                ('cdsmsje_es', models.CharField(db_column='CDsMsje_es', default='', max_length=500)),
                ('cdsmsje_ru', models.CharField(db_column='CDsMsje_ru', default='', max_length=500)),
                ('cdsmsje_zh', models.CharField(db_column='CDsMsje_zh', default='', max_length=500)),
            ],
            options={
                'verbose_name_plural': 'tblMensajes',
                'db_table': 'tblMensaje',
                'ordering': ('cidmensaje',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblmodulo',
            fields=[
                ('cidmod', models.CharField(db_column='CIdMod', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnommod_en', models.CharField(db_column='CNomMod_en', max_length=100)),
                ('cnommod_es', models.CharField(db_column='CNomMod_es', max_length=100)),
                ('cnommod_ru', models.CharField(db_column='CNomMod_ru', max_length=100)),
                ('cnommod_zh', models.CharField(db_column='CNomMod_zh', max_length=100)),
                ('ccimod', models.CharField(db_column='CCiMod', max_length=3)),
                ('nidpos', models.SmallIntegerField(db_column='NIdPos')),
                ('ccemod', models.CharField(db_column='CCeMod', max_length=1)),
                ('cidapp', models.ForeignKey(db_column='CIdApp', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblaplicacion')),
            ],
            options={
                'verbose_name_plural': 'tblModulos',
                'db_table': 'tblModulo',
                'ordering': ('cidmod',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblopcion',
            fields=[
                ('cidopc', models.CharField(db_column='CIdOpc', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ctxmenu_en', models.CharField(db_column='CTxMenu_en', max_length=100)),
                ('ctxmenu_es', models.CharField(db_column='CTxMenu_es', max_length=100)),
                ('ctxmenu_ru', models.CharField(db_column='CTxMenu_ru', max_length=100)),
                ('ctxmenu_zh', models.CharField(db_column='CTxMenu_zh', max_length=100)),
                ('nnunivel', models.SmallIntegerField(db_column='NNuNivel')),
                ('nnupos', models.SmallIntegerField(db_column='NNuPos')),
                ('cidopcpadre', models.CharField(db_column='CIdOpcPadre', max_length=36)),
                ('csnultimonivel', models.CharField(db_column='CSNUltimoNivel', max_length=1)),
                ('csnseparador', models.CharField(db_column='CSNSeparador', max_length=1)),
                ('cciclase', models.CharField(db_column='CCiClase', max_length=1)),
                ('ctxclase', models.CharField(db_column='CTxClase', max_length=500)),
                ('ctxargumento', models.CharField(blank=True, db_column='CTxArgumento', max_length=20, null=True)),
                ('ctxurlicono', models.CharField(db_column='CTxUrlIcono', max_length=500)),
                ('cidapp', models.ForeignKey(db_column='CIdApp', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblaplicacion')),
                ('cidfun', models.ForeignKey(db_column='CIdFun', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblfuncion')),
            ],
            options={
                'verbose_name_plural': 'tblOpciones',
                'db_table': 'tblOpcion',
                'ordering': ('cidopc',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblparametro',
            fields=[
                ('cidparametro', models.CharField(db_column='CIdParametro', max_length=36, primary_key=True, serialize=False)),
                ('cnomparametro', models.CharField(db_column='CNomParametro', max_length=255, unique=True)),
                ('ctxtexto', models.CharField(blank=True, db_column='CTxTexto', max_length=200, null=True)),
                ('nnuvalor', models.FloatField(db_column='NNuValor')),
                ('cdsvaloresposibles', models.CharField(db_column='CDsValoresPosibles', max_length=500)),
            ],
            options={
                'verbose_name_plural': 'tblParametros',
                'db_table': 'tblParametro',
                'ordering': ('cidparametro',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblpermisoeventoopcion',
            fields=[
                ('cidpermevenopc', models.CharField(db_column='CIdPermEvenOpc', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ccepermevenopc', models.CharField(db_column='CCePermEvenOpc', max_length=1)),
                ('cideventoopc', models.ForeignKey(db_column='CIdEventoOpc', default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='permisoevento_evento', to='apiwingo.Tbleventoopcion')),
            ],
            options={
                'verbose_name_plural': 'tblPermisoEventoOpciones',
                'db_table': 'tblPermisoEventoOpcion',
                'ordering': ('cidpermevenopc',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblpermisoopcion',
            fields=[
                ('cidpermopc', models.CharField(db_column='CIdPermOpc', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ccepermopc', models.CharField(db_column='CCePermOpc', max_length=1)),
                ('cidopc', models.ForeignKey(db_column='CIdOpc', default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='permiso_opcion', to='apiwingo.Tblopcion')),
            ],
            options={
                'verbose_name_plural': 'tblPermisoOpciones',
                'db_table': 'tblPermisoOpcion',
                'ordering': ('cidpermopc',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblpersona',
            fields=[
                ('cidpersona', models.CharField(db_column='CIdPersona', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnompersona', models.CharField(db_column='CNomPersona', max_length=150)),
                ('capepersona', models.CharField(db_column='CApePersona', max_length=150)),
                ('ccepersona', models.CharField(db_column='CCePersona', default='A', max_length=1)),
            ],
            options={
                'verbose_name_plural': 'tblPersonas',
                'db_table': 'tblPersona',
                'ordering': ('capepersona', 'cnompersona'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblpersonapropiedad',
            fields=[
                ('cidpersonapropiedad', models.CharField(db_column='CIdPersonaPropiedad', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ctxvalorpropiedad', models.TextField(db_column='CTxValorPropiedad')),
                ('cidpersona', models.ForeignKey(db_column='CIdPersona', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblpersona')),
            ],
            options={
                'verbose_name_plural': 'tblPersonaPropiedades',
                'db_table': 'tblPersonaPropiedad',
                'ordering': ('cidpersonapropiedad',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblpropiedad',
            fields=[
                ('cidpropiedad', models.CharField(db_column='CIdPropiedad', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnompropiedad', models.CharField(db_column='CNomPropiedad', max_length=100, unique=True)),
                ('ctxetiqueta', models.CharField(db_column='CTxEtiqueta', max_length=50)),
                ('ccitipodato', models.CharField(db_column='CCiTipoDato', max_length=1)),
                ('nnulongitud', models.SmallIntegerField(db_column='NNuLongitud', default=0)),
                ('ccepropiedad', models.CharField(db_column='CCePropiedad', default='A', max_length=1)),
            ],
            options={
                'verbose_name_plural': 'tblPropiedades',
                'db_table': 'tblPropiedad',
                'ordering': ('cnompropiedad',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblrecurso',
            fields=[
                ('cidrecurso', models.CharField(db_column='CIdRecurso', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ccitiporecurso', models.CharField(db_column='CCiTipoRecurso', max_length=3)),
                ('cnomrecurso', models.CharField(db_column='CNomRecurso', max_length=255)),
                ('ctxrutarecurso', models.CharField(db_column='CTxRutaRecurso', max_length=500)),
                ('ccerecurso', models.CharField(db_column='CCeRecurso', max_length=1)),
            ],
            options={
                'verbose_name_plural': 'tblRecursos',
                'db_table': 'tblRecurso',
                'ordering': ('cidrecurso',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblrol',
            fields=[
                ('cidrol', models.CharField(db_column='CIdRol', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomrol', models.CharField(db_column='CNomRol', max_length=100, unique=True)),
                ('ccerol', models.CharField(db_column='CCeRol', default='A', max_length=1)),
                ('ctxurlicono', models.CharField(db_column='CTxUrlIcono', default='', max_length=500)),
            ],
            options={
                'verbose_name_plural': 'roles',
                'db_table': 'tblRol',
                'ordering': ('cnomrol',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblrolusuario',
            fields=[
                ('cidrolusuario', models.CharField(db_column='CIdRolUsuario', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('ccerolusuario', models.CharField(db_column='CCeRolUsuario', default='A', max_length=1)),
                ('cidrol', models.ForeignKey(db_column='cidrol', default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='rol', to='apiwingo.Tblrol')),
            ],
            options={
                'verbose_name_plural': 'tblRolUsuarios',
                'db_table': 'tblRolUsuario',
                'ordering': ('cidrolusuario',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tbltipoevento',
            fields=[
                ('cidtipoevento', models.CharField(db_column='CIdTipoEvento', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomtipoevento', models.CharField(db_column='CNomTipoEvento', max_length=50, unique=True)),
                ('ctxurlicono', models.CharField(db_column='CTxUrlIcono', max_length=500)),
                ('ccetipoevento', models.CharField(db_column='CCeTipoEvento', default='A', max_length=1)),
            ],
            options={
                'verbose_name_plural': 'tblTipoEventos',
                'db_table': 'tblTipoEvento',
                'ordering': ('cnomtipoevento',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tbltipotrans',
            fields=[
                ('cidtipotrans', models.CharField(db_column='CIdTipoTrans', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomtipotrans', models.CharField(db_column='CNomTipoTrans', max_length=50, unique=True)),
                ('ccetipotrans', models.CharField(db_column='CCeTipoTrans', default='A', max_length=1)),
            ],
            options={
                'verbose_name_plural': 'tblTipoTransacciones',
                'db_table': 'tblTipoTrans',
                'ordering': ('cnomtipotrans',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tblusuario',
            fields=[
                ('cidusuario', models.CharField(db_column='CIdUsuario', default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('cnomusuario', models.CharField(db_column='CNomUsuario', max_length=50, unique=True)),
                ('ctxclave', models.CharField(db_column='CTxClave', max_length=10)),
                ('ctxcorreo', models.CharField(db_column='CTxCorreo', max_length=150, unique=True)),
                ('cnucelular', models.CharField(db_column='CNuCelular', max_length=20, unique=True)),
                ('cceusuario', models.CharField(db_column='CCeUsuario', default='A', max_length=1)),
                ('cidpersona', models.ForeignKey(db_column='CIdPersona', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblpersona')),
            ],
            options={
                'verbose_name_plural': 'tblUsuarios',
                'db_table': 'tblUsuario',
                'ordering': ('cnomusuario',),
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='tblrolusuario',
            name='cidusuario',
            field=models.ForeignKey(db_column='CIdUsuario', default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='rol_usuario', to='apiwingo.Tblusuario'),
        ),
        migrations.AddField(
            model_name='tblpersonapropiedad',
            name='cidpropiedad',
            field=models.ForeignKey(db_column='CIdPropiedad', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblpropiedad'),
        ),
        migrations.AddField(
            model_name='tblpermisoopcion',
            name='cidusuario',
            field=models.ForeignKey(db_column='CIdUsuario', default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='permiso_usuario', to='apiwingo.Tblusuario'),
        ),
        migrations.AddField(
            model_name='tblpermisoeventoopcion',
            name='cidpermopc',
            field=models.ForeignKey(db_column='CIdPermOpc', default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='permisoevento_opcion', to='apiwingo.Tblpermisoopcion'),
        ),
        migrations.AddField(
            model_name='tblevento',
            name='cidtipoevento',
            field=models.ForeignKey(db_column='CIdTipoEvento', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbltipoevento'),
        ),
        migrations.AddField(
            model_name='tblclientetrans',
            name='cidtipotrans',
            field=models.ForeignKey(db_column='CIdTipoTrans', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbltipotrans'),
        ),
        migrations.AddField(
            model_name='tblclienteeventodetcomppronos',
            name='cideventodetpronostico',
            field=models.ForeignKey(db_column='CIdEventoDetPronostico', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbleventodetpronostico'),
        ),
        migrations.AddField(
            model_name='tblclienteeventodetcomp',
            name='cideventodetcompetidor',
            field=models.ForeignKey(db_column='CIdEventoDetCompetidor', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbleventodetcompetidor'),
        ),
        migrations.AddField(
            model_name='tblclienteeventodet',
            name='cideventodetalle',
            field=models.ForeignKey(db_column='CIdEventoDetalle', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tbleventodetalle'),
        ),
        migrations.AddField(
            model_name='tblcliente',
            name='cidrolusuario',
            field=models.ForeignKey(db_column='CIdRolUsuario', on_delete=django.db.models.deletion.DO_NOTHING, to='apiwingo.Tblrolusuario'),
        ),
    ]
